Description

Given an array of N integers and an integer D. Consider all subarray with length D, the penalty of the subarray is the number of distinct elements present in the subarray. Find a subarray of length D with minimum penalty. Print the minimum penalty.

Input Format

The first line contains T, the number of test cases (1<=T<=10000).

The first line contains two space-separated integers N, D where 1<=N<=10^6, 1<=D<=N.

Next line contains N space-separated integers (0<=Ai<=1e6).

The Sum of N across all test cases â‰¤ 5*10^6.

Output Format

For each test case print the minimum penalty in a newline.
Sample Input 1

5
6 3
0 1 1 2 2 2
5 3
1 0 1 2 3
5 5
1 1 2 3 4
5 1
1 2 3 4 5
7 3
1 2 1 2 3 4 2

Sample Output 1

1
2
4
1
2

 

Note

For first test case all the subarray with length = 3 and minimum element ->
0,1,1 - 2
1,1,2 - 2
1,2,2 - 2
2,2,2 - 1
So minimum penalty = 1






























































sol: 

#include <bits/stdc++.h>
using namespace std;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define test int T; cin >> T; while (T--)
#define ll long long int
#define ld long double
#define endl "\n"
#define sss " "
#define mod 100000000

int freq[1000005] = {0};

void solve(){
	int N,K; cin >> N >> K;
	int arr[N];
	
	for(int i = 0; i < N; i++){
		cin >> arr[i];
	}
	int ans = K;
	int head = -1;
	int tail = 0;
	int cntDsnt = 0;
	while(tail <= N-K){
		while(head + 1 < N && (head - tail + 1) < K){
			if(freq[arr[head+1]] == 0) cntDsnt++;
			freq[arr[head+1]]++;
			head+=1;
		}
		ans = min(ans,cntDsnt);
		freq[arr[tail]]--;
		if(freq[arr[tail]]==0){
			cntDsnt--;
		}
		tail++;
	}
	cout << ans << endl;

	for(int i = N-K; i < N; i++){
		freq[arr[i]] = 0;
	}	
}

int main(){
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	IOS
	//pre();
	test
		solve();
	return 0;
}
