Description

You are given a number X, you can perform two operations:

    Double: Multiply the number on the display by 2, or;
    Decrement: Subtract 1 from the number on the display.

Return the minimum number of operations needed to convert number X to Y.

Input Format

The first line contains an integer T (number of test cases), 1 ≤ T ≤ 10^6.

The next T lines contain 2 space-separated integers X, Y where 1 ≤ X,Y ≤ 10^18.

Output Format

For each test case print the minimum number of operations required in a new line.

Constraints

1 ≤ T ≤ 10^6.
1 ≤ X,Y ≤ 10^18

Sample Input 1

3
10 15
21 14
10 22

Sample Output 1

4
7
7

Note

TEST CASE 1: X=10 Y=15

MOVES : 10 → 9 → 8 → 16 → 15     #Moves = 4
 

TEST CASE 2: X=21 Y =14

MOVES : 21 → 20 → 19 → 18 → 17 → 16 → 15 → 14    # moves = 7
 

TEST CASE 3: X=10 Y=22

MOVES : 10 → 9 → 8 → 7 → 6 → 12 → 11 → 22 # moves = 7













































Sol:  
#include <bits/stdc++.h>
using namespace std;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define test int T; cin >> T; while (T--)
#define ll long long int
#define ld long double
#define endl "\n"
#define sss " "
#define mod 1000000007


void solve(){
	ll x,y; cin >> x >> y;
	ll cnt = 0;
	while(y != x){
		if(x >= y){
			cnt += x-y;
			break;
		}
		else if(y%2 == 0){
			y = y/2;
			cnt++;
		}
		else{
			y = y + 1;
			cnt++;
		}
	}
	cout << cnt << endl;

}

int main(){
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	IOS
	//pre();
	test
		solve();
	return 0;
}
