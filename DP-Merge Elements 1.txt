Description

You are given N elements, in an array A. You can take any 2 consecutive elements a and b and merge them. On merging you get a single element with value (a+b)%100 and this process costs you a*b. After merging you will place this element in place of those 2 elements.
 

If the sequence is [A1, A2, A3, A4] and you merge A2 and A3, you incur a cost of A2*A3 and the array becomes [A1, (A2+A3)%100, A4].
 

Find the Minimum cost to merge all the elements into a single element.

Input Format

The first line contains a single element N. 1 <= N <= 500

The Second line contains N space separated integers, the Ai for the Array.  0 <= Ai < 100

Output Format

Output a single integer, the Minimum cost to Merge all the elements.
Sample Input 1

3
1 2 4 

Sample Output 1

14

Note

If you merge elements 1 and 2 first, You get [3,4] and pay a cost of 1*2=2. Then if you merge 3 and 3, You get [7] and pay a cost of 3*4=12.

Total cost incurred = 2+12 = 14.

If you merge elements 2 and 4 first, You get [1,6] and pay a cost of 2*4=8. Then if you merge 1 and 6, You get [7] and pay a cost of 1*6=6.

Total cost incurred =  8+6 = 14.

So the best you can do is at cost 14.




































sol:

#include <bits/stdc++.h>
using namespace std;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define test int T; cin >> T; while (T--)
#define ll long long int
#define ld long double
#define endl "\n"
#define sss " "
#define mod 1000000007

int N;
int dp[505][505];
int arr[505];

int rec(int l, int r){
	if(l == r) return 0;
	if(dp[l][r] != -1) return dp[l][r];
	
	int ans = INT_MAX;
    int sum = 0, tot = 0;
    for(int mid = l; mid <= r; mid++) tot += arr[mid];
	for(int mid = l ; mid < r ; mid++){
		sum += arr[mid];
        ans = min(ans, rec(l,mid) + rec(mid+1,r) + ((sum%100)*((tot - sum)%100)));
	}
	return dp[l][r] = ans; 
}


void solve(){
	cin >> N;
	memset(dp,-1,sizeof(dp));
	for(int i = 0; i < N; i++) {
    	cin >> arr[i];
    } 
	cout << rec(0,N-1) << endl;
}

int main(){
	#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
	#endif
	IOS

	//test
		solve();
	return 0;
}