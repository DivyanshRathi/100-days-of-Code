You are given a colourful array of N elements. It can have M different colours, some of the elements are uncoloured. The beauty of the array is defined as the minimum number of contiguous groups you can split the array into so that each group contains elements of the same colour. You have to colour the uncoloured elements of the array such that the beauty of the array is K. To colour the i-th element with colour j, you will require Pij liters of paint. You have to find the minimum amount of paint (in liters) needed to finish the job.

Input Format

The first line of the input contains one integer T - the number of test cases. Then T test cases follow.

The first line of each test case contains three space-separated integers N, M, K.

The second line of each test case contains N space-separated integers - the initial colours.

Each of the next N lines contains M space-separated integers - the amount of paint (in liters).

Output Format

For each test case, print the minimum amount of paint (in liters) needed to finish the job. If there is no valid way to colour the array with beauty K, print -1.

Constraints

1≤ T ≤ 10

1≤ K≤ N ≤ 100

1≤ M ≤ 100

0≤ Ci ≤ M  (Ci = 0 denotes the element is uncoloured)

1≤ Pij ≤ 109
Sample Input 1

3
1 3 1
0
3 4 1
1 1 1
1
5
3 2 1
1 2 1
1 2
3 4
5 6

Sample Output 1

1
0
-1

Note

For the first test case, colour the first element with color 1 to get minimum paint as 1 liter.

For the second test case, the given array already satisfied all the conditions so we do not have to colour any element.

For the third test case, the given array has beauty 3 which is more than given beauty 1.

























































sol:


#include <bits/stdc++.h>
using namespace std;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define test int T; cin >> T; while (T--)
#define ll long long int
#define ld long double
#define endl "\n"
#define sss " "
#define mod 100000007


int N,M,K;
int arr[105];
int P[105][105];
ll dp[105][105][105];
int back[3001][3001];
string subs;
string s1,s2;
int result = -INT_MAX;

ll rec(int idx,int k,int pcol){
	if(k>K) return 1e18;
	if(idx == N){
		if(k == K) return 0;
		else return 1e18;
	}
	if(dp[idx][k][pcol] != -1) return dp[idx][k][pcol];
	ll ans = 1e18;
	if(arr[idx] == 0){
		for(int j = 1; j <=M; j++){
			if(pcol == j) ans = min(ans, rec(idx+1,k,j) + P[idx][j]);
			else ans = min(ans, rec(idx+1,k + 1,j) + P[idx][j]);
		}
	}
	else{
		if(pcol == arr[idx]) ans = min(ans, rec(idx+1,k,arr[idx])) ;
		else ans = min(ans, rec(idx+1,k + 1,arr[idx])) ;
	}
	return dp[idx][k][pcol] = ans;

}


void solve(){
	cin >> N >> M >> K;
	memset(dp,-1,sizeof(dp));
	for(int i = 0; i < N; i++) cin >> arr[i];
	for(int i = 0; i < N; i++){
		for(int j = 1; j <= M; j++){
			cin >> P[i][j];

		if(arr[i]) P[i][j] = 0;
		}
	}
	ll ans = rec(0,0,0);
	if(ans == 1e18) ans = -1;
	cout << ans << endl; 
}

int main(){
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	IOS
	//pre();
	test
		solve();
	return 0;
}
