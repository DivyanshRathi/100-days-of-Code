Description

Given an array of N integers, find the length of the smallest sub-array that contains all the distinct elements of the array.

Input Format

The first line contains T, the number of test cases (1<=T<=10).

The first line contains an integer N, 1<=N<=10^5.

Next line contains N space-separated integers (0<=Ai<=1e5).

 

Output Format

For each test case print length of the smallest sub-array that contains all the distinct elements of array in a newline.
Sample Input 1

6
5
1 1 3 2 3
5
1 2 3 4 5
6
1 2 2 3 3 4
6
1 2 1 3 2 4
5
1 1 1 1 1
1
1

Sample Output 1

3
5
6
4
1
1

 

Note

For first test case → smallest subarray -> (1,3,2).

For second test case → smallest subarray -> (1,2,3,4,5).

For third test case → smallest subarray -> (1 2 2 3 3 4).





































sol:


#include <bits/stdc++.h>
using namespace std;

#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define test int T; cin >> T; while (T--)
#define ll long long int
#define ld long double
#define endl "\n"
#define sss " "
#define mod 100000000


int freq[1000005] = {0};

void solve(){
	int N; cin >> N;
	int arr[N];
	set<int> s;
	
	for(int i = 0; i < N; i++){
		cin >> arr[i];
		s.insert(arr[i]);
	}
	int Dsnt = s.size();
	s.clear();

	int ans = N;
	int head = -1;
	int tail = 0;
	int cntDsnt = 0;
	while(tail < N){
		while(head + 1 < N && cntDsnt < Dsnt){
			if(freq[arr[head+1]] == 0) cntDsnt++;
			freq[arr[head+1]]++;
			head+=1;
		}
		if(cntDsnt == Dsnt){
			ans = min(ans,head - tail + 1);
		}
		freq[arr[tail]]--;
		if(freq[arr[tail]]==0){
			cntDsnt--;
		}
		tail++;
	}
	cout << ans << endl;	
}

int main(){
#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	IOS
	//pre();
	test
		solve();
	return 0;
}
